import os
import subprocess
import getpass

# Function to run shell commands
def run_command(command):
    try:
        subprocess.run(command, shell=True, check=True)
    except subprocess.CalledProcessError as e:
        print(f"An error occurred: {e}")
        exit(1)

# Function to check if a command exists
def command_exists(command):
    return subprocess.run(f"command -v {command}", shell=True, capture_output=True).returncode == 0

# Install necessary dependencies
def install_dependencies():
    if not command_exists("curl"):
        print("Installing curl...")
        run_command("apt-get update")
        run_command("apt-get install -y curl")
    
    if not command_exists("gpg"):
        print("Installing GPG...")
        run_command("apt-get install -y gnupg")
    
    if not command_exists("pass"):
        print("Installing pass...")
        run_command("apt-get install -y pass")

    print("Dependencies installed successfully.")

# Initialize GPG key if it doesn't exist
def initialize_gpg():
    if subprocess.run("gpg --list-keys | grep -q 'pub'", shell=True).returncode != 0:
        print("Generating GPG key...")
        gpg_command = """
        cat <<EOF | gpg --batch --gen-key
        %echo Generating a default key
        Key-Type: default
        Key-Length: 2048
        Subkey-Type: default
        Name-Real: Your Name
        Name-Comment: Generated by setup_mailserver.sh
        Name-Email: youremail@example.com
        Expire-Date: 0
        %no-protection
        %commit
        %echo done
EOF
        """
        run_command(gpg_command)
    
    # Get GPG key ID
    gpg_key_id = subprocess.run("gpg --list-keys | grep 'pub ' -A 1 | tail -n 1 | awk '{print $1}'", shell=True, capture_output=True, text=True).stdout.strip()
    return gpg_key_id

# Initialize pass and store No-IP credentials
def initialize_pass(gpg_key_id):
    password_store_dir = os.path.expanduser("~/.password-store")
    os.environ["PASSWORD_STORE_DIR"] = password_store_dir
    
    if not os.path.exists(password_store_dir):
        print("Initializing pass...")
        run_command(f"pass init {gpg_key_id}")
    
    noip_user = input("Enter your No-IP username: ")
    noip_pass = getpass.getpass("Enter your No-IP password: ")

    try:
        run_command(f"echo {noip_user} | pass insert -m noip/username")
    except subprocess.CalledProcessError:
        print("Failed to insert No-IP username into pass")
        exit(1)

    try:
        run_command(f"echo {noip_pass} | pass insert -m noip/password")
    except subprocess.CalledProcessError:
        print("Failed to insert No-IP password into pass")
        exit(1)

# Create necessary directories and files
def create_directories_and_files():
    dirs = [
        "SecureMailStack/certbot/conf",
        "SecureMailStack/certbot/www",
        "SecureMailStack/dovecot/conf",
        "SecureMailStack/dovecot/mail",
        "SecureMailStack/nginx",
        "SecureMailStack/postfix",
        "SecureMailStack/roundcube/config",
        "SecureMailStack/roundcube/plugins",
        "SecureMailStack/roundcube/skins",
    ]

    files = {
        "SecureMailStack/docker-compose.yml": """version: '3.7'

services:
  mailserver:
    image: tvial/docker-mailserver:latest
    hostname: mail
    domainname: ${HOSTNAME}
    container_name: mailserver
    environment:
      - ENABLE_SPAMASSASSIN=1
      - ENABLE_CLAMAV=1
      - ENABLE_POSTGREY=1
      - ENABLE_FAIL2BAN=1
      - SSL_TYPE=manual
    volumes:
      - ./config/:/tmp/docker-mailserver/
      - ./maildata:/var/mail
      - ./mailstate:/var/mail-state
      - ./certbot/conf:/etc/letsencrypt
    ports:
      - "2525:25"
      - "143:143"
      - "465:465"
      - "587:587"
      - "993:993"
    cap_add:
      - NET_ADMIN
      - SYS_PTRACE
    env_file:
      - .env
    restart: always

  roundcube:
    image: roundcube/roundcubemail
    container_name: roundcube
    environment:
      - ROUNDCUBEMAIL_DEFAULT_HOST=dovecot
      - ROUNDCUBEMAIL_SMTP_SERVER=postfix
    volumes:
      - ./roundcube/config:/var/www/html/config
      - ./roundcube/plugins:/var/www/html/plugins
      - ./roundcube/skins:/var/www/html/skins
    ports:
      - "8080:80"
    depends_on:
      - mailserver

  nginx:
    image: nginx
    container_name: nginx
    volumes:
      - ./nginx/webmail.conf:/etc/nginx/conf.d/default.conf
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - roundcube
    restart: always

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew --webroot -w /var/www/certbot; sleep 12h & wait $${!}; done;'"
    restart: always
""",
        "SecureMailStack/postfix/main.cf": """myhostname = mail.${HOSTNAME}
mydomain = ${HOSTNAME}
myorigin = /etc/mailname
mydestination = $myhostname, localhost.$mydomain, localhost, $mydomain
relayhost =
mynetworks = 127.0.0.0/8
mailbox_size_limit = 0
recipient_delimiter = +
inet_interfaces = all
inet_protocols = ipv4
""",
        "SecureMailStack/dovecot/conf/dovecot.conf": """protocols = imap pop3 lmtp
listen = *

mail_location = maildir:/var/mail/%d/%n

ssl = required
ssl_cert = </etc/letsencrypt/live/${HOSTNAME}/fullchain.pem
ssl_key = </etc/letsencrypt/live/${HOSTNAME}/privkey.pem

auth_mechanisms = plain login

passdb {
  driver = pam
}

userdb {
  driver = passwd
}

service imap-login {
  inet_listener imap {
    port = 143
  }
  inet_listener imaps {
    port = 993
    ssl = yes
  }
}
""",
        "SecureMailStack/nginx/webmail.conf": """server {
    listen 80;
    server_name webmail.${HOSTNAME};

    location / {
        proxy_pass http://roundcube:80;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }
}

server {
    listen 443 ssl;
    server_name webmail.${HOSTNAME};

    ssl_certificate /etc/letsencrypt/live/${HOSTNAME}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/${HOSTNAME}/privkey.pem;

    location / {
        proxy_pass http://roundcube:80;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}
""",
        "SecureMailStack/roundcube/config/config.inc.php": """<?php

$config = array();

$config['db_dsnw'] = 'mysql://roundcubeuser:password@localhost/roundcubemail';
$config['default_host'] = 'dovecot';
$config['smtp_server'] = 'postfix';
$config['smtp_user'] = '%u';
$config['smtp_pass'] = '%p';
$config['smtp_port'] = 587;
$config['des_key'] = 'YOUR_RANDOM_KEY_HERE';
$config['plugins'] = array('archive', 'zipdownload');

?>
""",
        "SecureMailStack/renew_noip.sh": """#!/bin/bash

# Retrieve No-IP credentials from pass
NOIP_USER=$(pass noip/username)
NOIP_PASS=$(pass noip/password)

# No-IP login URL
LOGIN_URL="https://www.noip.com/login"

# No-IP dashboard URL (the URL you want to access to trigger the renewal)
DASHBOARD_URL="https://my.noip.com/#!/dynamic-dns"

# Login and keep the session cookies
curl -c cookies.txt -d "username=${NOIP_USER}&password=${NOIP_PASS}" ${LOGIN_URL}

# Access the dashboard to trigger the renewal
curl -b cookies.txt ${DASHBOARD_URL}

# Clean up
rm cookies.txt
""",
        "SecureMailStack/setup_mailserver.sh": """#!/bin/bash

# Function to check if a command exists
command_exists() {
  command -v "$1" >/dev/null 2>&1
}

# Install necessary dependencies
if ! command_exists curl; then
  echo "Installing curl..."
  sudo apt-get update
  sudo apt-get install -y curl
fi

if ! command_exists gpg; then
  echo "Installing GPG..."
  sudo apt-get install -y gnupg
fi

if ! command_exists pass; then
  echo "Installing pass..."
  sudo apt-get install -y pass
fi

# Verify pass installation
if ! command_exists pass; then
  echo "Error: pass is not installed. Please install pass and try again."
  exit 1
fi

# Generate GPG key if it doesn't exist
if ! gpg --list-keys | grep -q 'pub'; then
  echo "Generating GPG key..."
  gpg --batch --gen-key <<EOF
    Key-Type: default
    Key-Length: 2048
    Subkey-Type: default
    Name-Real: Your Name
    Name-Comment: Generated by setup_mailserver.sh
    Name-Email: youremail@example.com
    Expire-Date: 0
    %no-protection
    %commit
EOF
fi

# Get GPG key ID
GPG_KEY_ID=$(gpg --list-keys | grep 'pub ' -A 1 | tail -n 1 | awk '{print $1}')

# Set password store directory to user's home directory
export PASSWORD_STORE_DIR="$HOME/.password-store"

# Initialize pass in the user's home directory if not already initialized
if [ ! -d "$PASSWORD_STORE_DIR" ]; then
  echo "Initializing pass..."
  pass init "$GPG_KEY_ID"
fi

# Prompt user to enter No-IP credentials and store them in pass
echo "Enter your No-IP username:"
read -r NOIP_USER
echo "$NOIP_USER" | pass insert -m noip/username

echo "Enter your No-IP password:"
read -s NOIP_PASS
echo "$NOIP_PASS" | pass insert -m noip/password

# Source environment variables
source .env

# Pull the latest images
docker-compose pull

# Run Docker Compose
docker-compose up -d

# Obtain SSL certificates
docker-compose run --rm certbot certonly --webroot --webroot-path=/var/www/certbot -d $HOSTNAME -d webmail.$HOSTNAME

# Restart services to apply SSL certificates
docker-compose restart nginx mailserver

# Setup cron job for No-IP renewal
(crontab -l 2>/dev/null; echo "0 0 */30 * * /path/to/renew_noip.sh") | crontab -

echo "Mail server setup complete!"
""",
        "SecureMailStack/.env": """HOSTNAME=yourdomain.noip.com
NOIP_USER=$(pass noip/username)
NOIP_PASS=$(pass noip/password)
"""
    }

    for dir in dirs:
        os.makedirs(dir, exist_ok=True)

    for file, content in files.items():
        with open(file, "w") as f:
            f.write(content)

    os.chmod("SecureMailStack/renew_noip.sh", 0o755)
    os.chmod("SecureMailStack/setup_mailserver.sh", 0o755)
    print("Directories and files created successfully.")

# Main function to set up the mail server
def main():
    install_dependencies()
    gpg_key_id = initialize_gpg()
    initialize_pass(gpg_key_id)
    create_directories_and_files()
    print("Setup complete. Please log out and log back in or reboot your system for the Docker group changes to take effect.")

if __name__ == "__main__":
    main()
